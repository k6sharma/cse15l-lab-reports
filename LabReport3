Part 1: 
A failure-inducing input for the buggy program, as a JUnit test and any associated code 
(write it as a codeblock in Markdown)
		public class ArrayTests {
  @Test
  public void testReverseInPlace(){
    int[] input1 = {7, 8, 9};
    ArrayExamples.reverseInPlace(input1);
    assertArrayEquals(new int[]{9, 8, 7}, input1);
  }

  @Test
  public void testReversed(){
    int[] input1 = {7, 8, 9};
    assertArrayEquals(new int[]{9, 8, 7}, ArrayExamples.reversed(input1));
    assertArrayEquals(new int[]{7, 8, 9},input1);
  }
}
An input that doesn't induce a failure, as a JUnit test and any associated code 
(write it as a code block in Markdown)
@Test 
	public void testReverseInPlace() {
    int[] input1 = { 3 };
    ArrayExamples.reverseInPlace(input1);
    assertArrayEquals(new int[]{ 3 }, input1);
	}


  @Test
  public void testReversed() {
    int[] input1 = { };
    assertArrayEquals(new int[]{ }, ArrayExamples.reversed(input1));
  }
}
Part 2:
4 interesting options to use the `find` command:

Option 1: -mtime
This command helps find files by age/time of modification. 

Example 1: Within the past 3 days
Input:
find . -mtime -3
Output:
/~$llabus 19B 2024.docx
./Syllabus 19B 2024.docx
./.DS_Store
./Week5_B4_Lecture.pdf
./Syllabus_BICD100_WI24.pdf
./~$Updated WA2 W24 data.xlsx
./Bild 4 - Individual Writing Assignment .odt
./Writing2 Instructions.pdf
./P3.3.pages
./Bild 4 - Individual Writing Assignment .pdf
./Bild 4 - Individual Writing Assignment -2.pdf
./Updated WA2 W24 data.xlsx
./Lecture 7 Section B.pdf

Example 2: Exactly 1 day ago
Input:
find . -mtime 1
Output:
./~$llabus 19B 2024.docx
./Syllabus 19B 2024.docx
./Week5_B4_Lecture.pdf
./Bild 4 - Individual Writing Assignment .odt
./Writing2 Instructions.pdf
./Bild 4 - Individual Writing Assignment .pdf
./Bild 4 - Individual Writing Assignment -2.pdf
./Lecture 7 Section B.pdf

Option 2: -name
Helps find files/directories with a specific name 
Example 1: Finding a file
Input: find ./Downloads -name "P3.3.docx"
Output: ./Downloads/P3.3.docx
Example 2: Finding a directory
Input: find ./Downloads -name "wavelet"
Output: ./Downloads/wavelet
Option 3: -type
Helps specify whether we want to find a file or a directory
Example 1: Finding a file
Input: find ./Downloads/week1Discussion-main-2 -type f
Output:
./Downloads/week1Discussion-main-2/DemoArrayImpl.java
./Downloads/week1Discussion-main-2/.DS_Store
./Downloads/week1Discussion-main-2/DemoArray.java
./Downloads/week1Discussion-main-2/libs/junit-4.12.jar
./Downloads/week1Discussion-main-2/libs/hamcrest-core-1.3.jar
./Downloads/week1Discussion-main-2/README.md
./Downloads/week1Discussion-main-2/DemoArrayImplTester.java 
Example 2: Finding a directory 
Input: find ./Downloads/week1Discussion-main-2 -type d
Output: 
./Downloads/week1Discussion-main-2
./Downloads/week1Discussion-main-2/libs

Option 4: -empty
Helps find empty files (can help declutter)
Example 1: Finding empty files
Input:
find ./Documents -empty         
Output:
./Documents/.localized
./Documents/GitHub/lab3/.git/objects/info
./Documents/GitHub/lab3/.git/refs/tags
./Documents/GitHub/lab3/.git/branches
./Documents/MATLAB

Example 2: When there's no empty files in the specified directory
Input: find ./Downloads/week1Discussion-main -empty
Output: No output (because no empty file found)

Used ChatGPT and entered the following:
“Find 4 interesting command-line options for the find command, and give a 
couple examples as well”
Kept regenerating for more options and chose what I thought were 
the most useful 
